#+Title: Installing and setting up ELK server 
#+Date: November 7, 2016
#+Author: VLEAD Systems 

* Introduction 
  This document mentions the requirements, prerequisites, installation
  steps and custom configuration used to set up ELK (Elasticsearch
  Logstash Kibana server).

* Requirements 
  Following are the requirements -
  + A server to store VLABS Open-edX analytics in a desired format (In
    this case it is JSON format)
  + A visualization tool to view logs stored/fetched. Hence Kibana.
  + Also the same server can be used to store logs and generate
    visualizations out of it.

* Why ELK ?
  + ELK is a combined solution given by elastic.co to store logs in
    certain formats and then a visualization tool takes care of
    visualization of obtained logs in the form of nice graphs. A user
    can interact with ELK server using web based HTTP(S) API to write,
    read, update, delete data into elasticsearch NOSQL database.
  + There was no specific reason to choose NOSQL database, still VLABS
    analaytics being in the form of document results choosing
    elasticsearch as a good choice.
  + The Kibana visualization tool needs minimal intervention to
    produce graphs from the records/data stored in elasticsearch
    database.
  + As a result of this, ELK provides a complete package to satisfy
    the requirements with minimal efforts.


* Design
  + ELK is used as a data store and is independent of the service
    willing to write into it.
  + ELK is running behind an nginx proxy server and hence all sorts of
    authentication, authorization, limting checks, security checks are
    applied in the nginx configuration.
  + ELK as a service is to be available to authenticated and
    authorized users/services. Each application must create its index
    and document.
  + A simple diagram showing a flow of how a service and ELK service
    will interact.

*
  
   
  

* Installation
** System/Machine specifications for installing ELK server 
   |------+------------------+--------------|
   | S.No | Component        |              |
   |------+------------------+--------------|
   |   1. | RAM              | 4 GB         |
   |------+------------------+--------------|
   |   2. | HDD              | 150 GB       |
   |------+------------------+--------------|
   |   3. | Operating System | Ubuntu 14.04 |
   |------+------------------+--------------|
   
   
     
** Install ELK
   + Install Pre-requisites
     #+BEGIN_SRC command
     sudo apt-get update
     sudo apt-get -y install build-essential
     sudo apt-get -y install binutils
     sudo apt-get -y install binutils-doc
     sudo apt-get -y install python-dev python3-dev
     sudo apt-get -y install python-pip
     sudo apt-get -y install git
     sudo apt-get install -y software-properties-common
     sudo apt-get install -y python-software-properties
     #+END_SRC
   + Install Java 8
     #+BEGIN_SRC command
     yes | sudo apt-add-repository ppa:webupd8team/java
     sudo apt-get update
     sudo apt-get install -y oracle-java8-installer
     #+END_SRC
   + Install Elasticsearch 
     #+BEGIN_SRC command
     wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
     echo 'deb http://packages.elastic.co/elasticsearch/2.x/debian stable main' | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list
     sudo apt-get update
     sudo apt-get -y install elasticsearch
     #+END_SRC
   + Set elasticsearch service to start on server bootup and restart services
     #+BEGIN_SRC command
     sudo update-rc.d elasticsearch defaults 95 10
     sudo service elasticsearch restart"
     #+END_SRC
   + Install Kibana and set kibana service to start on server bootup 
     #+BEGIN_SRC command
     echo 'deb http://packages.elastic.co/kibana/4.4/debian stable main' | sudo tee -a /etc/apt/sources.list.d/kibana-4.4.x.list
     sudo apt-get update
     sudo apt-get -y install kibana
     sudo update-rc.d kibana defaults 96 9
     sudo service kibana start
     #+END_SRC
   + Install logstash and set logstash service to start on server bootup
     #+BEGIN_SRC command
     echo 'deb http://packages.elastic.co/logstash/2.2/debian stable main' | sudo tee /etc/apt/sources.list.d/logstash-2.2.x.list 
     sudo apt-get update
     sudo apt-get -y install logstash
     sudo update-rc.d logstash defaults 96 9
     #+END_SRC
   + Install Nginx
     #+BEGIN_SRC command
     sudo apt-get -y install nginx
     sudo apt-get -y install apache2-utils
     sudo service nginx restart
     #+END_SRC
   + Install redis server 
     #+BEGIN_SRC command
     sudo apt-get -y install redis-server
     sudo service redis-server start
     sudo apt-get update
     #+END_SRC

* Server configuration
** Elasticsearch configuration
   Elasticsearch must be configured such that it must be available to
   the services willing to write data into it. To make this happen, we
   need to configure elasticsearch to listen on specific port and
   host.
   + Open file /etc/elasticsearch/elasticsearch.yml
     #+BEGIN_SRC command
     vim /etc/elasticsearch/elasticsearch.yml
     #+END_SRC
   + Add the following lines at the end of the file 
     #+BEGIN_SRC command
     network.host: 0.0.0.0
     http.port: 9200
     #+END_SRC
   + Save file and restart elasticsearch services
     #+BEGIN_SRC command
     service elasticsearch restart
     #+END_SRC
** Nginx confiuration
   + Any request to make a call to Elasticseach API must pass through
   nginx server as a proxy.  Hence Nginx is specially configured to
   upstream all requests made to port 9400 to 9200.  Also, no
   application must be able to delete the index of elasticsearch. A
   confiuration is being made to disable DELETE API of Elasticsearch
   and hence only server admin can delete the indexes of
   elasticsearch.
   + Below is the configuration for nginx as a proxy to elasticsearch and kibana 
     #+BEGIN_SRC command
     server {
     listen 80;

     server_name vlabs-analytics.vlabs.ac.in;

     auth_basic "Restricted Access";
     auth_basic_user_file /etc/nginx/htpasswd.users;
     
     #This configuration is to access Kibana dashboard on its default port 5601
     location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;        
       } #End location block
 
    } #End server block
 
    #Below upstream configuration is to upstream requests of port 9400 to 9200
    upstream elasticsearch {
        server localhost:9200;
        keepalive 64;
     }
 
     server {
       listen 9400;
       server_name vlabs-analytics.vlabs.ac.in;
       #client_max_body_size 50m;

       location / {
        #To disable DELETE API and allow only GET/POST feature
        if ($request_method !~ ^(GET|POST)$ ) {
              return 444;
        }

        proxy_pass http://elasticsearch;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_pass_header Access-Control-Allow-Origin;
        proxy_pass_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #add_header Access-Control-Allow-Credentials true;

       }#End location block
   }#End server block


     #+END_SRC
* Post Deployment
   + Login to VM
   + Configure nginx  ::
      #+BEGIN_SRC command
       cp /root/labs/elk-stack-for-analytics/scripts/elasticsearch-nginx.conf /etc/nginx/sites-enabled/default    
      #+END_SRC
   + Create dashboard admin user  ::
      Create a user named vlabs-dashboard and give some password to it.
      #+BEGIN_SRC command
       sudo htpasswd -c /etc/nginx/htpasswd.users <dashboard-username>
       sudo htpasswd -c /etc/nginx/htpasswd.users vlabs-dashboard
      #+END_SRC

   + Restart services
       #+BEGIN_SRC command
       service nginx restart 
       service elasticsearch restart
       service kibana restart
       service logstash restart
       #+END_SRC
  
  
